package ajedrez;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.StringReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.Symbol;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author HP
 */
public class Interfaz extends javax.swing.JFrame {
     String ubicacionArchivo;

    /**
     * Creates new form Interfaz
     */
    public Interfaz() {
        initComponents();
        btnAnalizarArchivo.setEnabled(false);
        btnAnalizarSintaxis.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    
       public void getUbicacion() {
        
        //Ventana para ubicación del archivo
        JFileChooser seleccionar_archivo = new JFileChooser();
        //Abre la ventana en al ubicación actual
        seleccionar_archivo.setCurrentDirectory(new java.io.File("."));
        //Se define el título de la ventana
        seleccionar_archivo.setDialogTitle("Buscar archivo");//seleccionar_archivo.setAcceptAllFileFilterUsed(true);

 
        if (seleccionar_archivo.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            ubicacionArchivo = seleccionar_archivo.getSelectedFile().toString();
            lblpath.setText(ubicacionArchivo);
            //Se activa el botón para Analizar
            btnAnalizarArchivo.setEnabled(true);
            btnAnalizarSintaxis.setEnabled(true);
        } else { //Si no se selecciona el archivo
            //Se limpia el label
            limpiar();
        }
    }
       
    public void limpiar(){
        //Cambia el texto en label de ubicacion archivo
        lblpath.setText("Archivo no seleccionado...");
        //Desactiva el botón analizar archivo
        btnAnalizarArchivo.setEnabled(false);
        //Se limpia la variable
        ubicacionArchivo = "";
        txtResultado.setText("");
        txtResultadoLexico.setText("");
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        btnAnalizarArchivo = new javax.swing.JButton();
        btnGetRuta = new javax.swing.JButton();
        lblpath = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtResultado = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        btnAnalizarSintaxis = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtResultadoLexico = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(128, 128, 128));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/robot.png"))); // NOI18N
        jLabel2.setText("Resultado Léxico");

        btnAnalizarArchivo.setForeground(new java.awt.Color(51, 51, 255));
        btnAnalizarArchivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/analizar.png"))); // NOI18N
        btnAnalizarArchivo.setText("Analizar");
        btnAnalizarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarArchivoActionPerformed(evt);
            }
        });

        btnGetRuta.setForeground(new java.awt.Color(51, 51, 255));
        btnGetRuta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/cargar.png"))); // NOI18N
        btnGetRuta.setText("Seleccionar Archivo");
        btnGetRuta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetRutaActionPerformed(evt);
            }
        });

        lblpath.setBackground(new java.awt.Color(173, 216, 230));
        lblpath.setForeground(new java.awt.Color(51, 51, 255));
        lblpath.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/principal.png"))); // NOI18N
        lblpath.setText("NO SELECCIONADO");

        txtResultado.setColumns(20);
        txtResultado.setRows(5);
        jScrollPane2.setViewportView(txtResultado);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/robot.png"))); // NOI18N
        jLabel3.setText("Resultado Sintáctico");

        btnAnalizarSintaxis.setForeground(new java.awt.Color(51, 51, 255));
        btnAnalizarSintaxis.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/analizar.png"))); // NOI18N
        btnAnalizarSintaxis.setText("Analizar");
        btnAnalizarSintaxis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarSintaxisActionPerformed(evt);
            }
        });

        txtResultadoLexico.setColumns(20);
        txtResultadoLexico.setRows(5);
        jScrollPane3.setViewportView(txtResultadoLexico);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(137, 137, 137)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAnalizarArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAnalizarSintaxis, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(156, 156, 156))
            .addGroup(layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 175, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(481, 481, 481)
                        .addComponent(lblpath))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(417, 417, 417)
                        .addComponent(btnGetRuta, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(btnGetRuta, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblpath, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAnalizarSintaxis, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                    .addComponent(btnAnalizarArchivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(278, 278, 278))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAnalizarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarArchivoActionPerformed
        // TODO add your handling code here:
        try{
            ProbarLexerFile(ubicacionArchivo);
        }catch(IOException ex){
            System.out.println(ex.getMessage());
        }
    }//GEN-LAST:event_btnAnalizarArchivoActionPerformed

    private void btnGetRutaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetRutaActionPerformed
        // TODO add your handling code here:
        limpiar();
        getUbicacion();
    }//GEN-LAST:event_btnGetRutaActionPerformed

    private void btnAnalizarSintaxisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarSintaxisActionPerformed
        // Leer el archivo de texto desde la ubicación almacenada en la variable ubicacionArchivo
   // Verifica que la ubicación del archivo no sea null
    if (ubicacionArchivo == null || ubicacionArchivo.isEmpty()) {
        txtResultadoLexico.setText("La ubicación del archivo no está definida.");
        txtResultadoLexico.setForeground(Color.RED);
        return;
    }

    File file = new File(ubicacionArchivo);

    // Verifica que el archivo exista
    if (!file.exists()) {
        txtResultadoLexico.setText("El archivo no existe en la ubicación especificada.");
        txtResultadoLexico.setForeground(Color.RED);
        return;
    }

    try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
        StringBuilder content = new StringBuilder();
        String line;
        while ((line = reader.readLine()) != null) {
            content.append(line).append("\n"); // Agregar la línea al contenido
        }
        System.out.println("Contenido del archivo:");
        System.out.println(content.toString()); // Imprimir el contenido del archivo

        // Crear un analizador sintáctico para la entrada completa
        Sintax s = new Sintax(new LexerCup(new StringReader(content.toString())));

        StringBuilder analysisResult = new StringBuilder();
        boolean syntaxError = false;
        try {
            s.parse(); // Realizar el análisis sintáctico
            System.out.println(s.getS());
            analysisResult.append("Análisis realizado correctamente");
        } catch (Exception ex) {
            syntaxError = true;
            Symbol sym = s.getS();
  
            if (sym != null) {
                analysisResult.append("Error de sintaxis en la línea ").append(sym.left + 1)
                        .append(", columna ").append(sym.right + 1).append(", texto: \"")
                        .append(sym.value).append("\"");
            } else if(sym == null){
                
               analysisResult.append("Error Semántico: ").append(ex.getMessage());
            }  
        }

        // Mostrar los resultados en la interfaz
        if (syntaxError) {
            txtResultadoLexico.setText(analysisResult.toString());
            txtResultadoLexico.setForeground(Color.RED);
        } else {
            txtResultadoLexico.setText(analysisResult.toString());
            txtResultadoLexico.setForeground(new Color(25, 111, 61));
        }
    } catch (IOException ex) {
        ex.printStackTrace();
        // Manejar el error al abrir o leer el archivo
        txtResultadoLexico.setText("Error al abrir o leer el archivo");
        txtResultadoLexico.setForeground(Color.RED);
    }
    }//GEN-LAST:event_btnAnalizarSintaxisActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }
    
    private void ProbarLexerFile(String ubicacionArchivo) throws IOException {
        boolean hayErrores = false;
            try (BufferedReader reader = new BufferedReader(new FileReader(ubicacionArchivo))) {
                StringBuilder texto = new StringBuilder();
                String linea;
                while ((linea = reader.readLine()) != null) {
                    texto.append(linea).append("\n");
                }
                StringReader stringReader = new StringReader(texto.toString());
                Lexer lexer = new Lexer(stringReader);
                StringBuilder resultado = new StringBuilder();
                int fila = 1;
                int columna = 1;
                try {
                    while (true) {
                        Token token = lexer.yylex();
                        if (token == null) {
                            break;
                        }
                        //if(token == Token.ERROR ){
                            resultado.append("Token: ").append(token).append(", Lexema: ").append(lexer.lexeme ).append(", Fila: ").append(lexer.line_count +1).append(", Columna: ").append(lexer.column_count + 1).append("\n");
                            fila = lexer.line_count;
                            columna = lexer.column_count;
                            hayErrores = true;
                       // }
                    }
                    if (!hayErrores) {
                        txtResultado.setText("NO EXISTEN ERRORES");
                    } else {
                        txtResultado.setText(resultado.toString());
                    }
                } catch (IOException ex) {
                    txtResultado.setText("Error: " + ex.getMessage() + " en fila " + fila + ", columna " + columna);
                }
            } catch (IOException ex) {

            }
        }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnalizarArchivo;
    private javax.swing.JButton btnAnalizarSintaxis;
    private javax.swing.JButton btnGetRuta;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblpath;
    private javax.swing.JTextArea txtResultado;
    private javax.swing.JTextArea txtResultadoLexico;
    // End of variables declaration//GEN-END:variables
}

